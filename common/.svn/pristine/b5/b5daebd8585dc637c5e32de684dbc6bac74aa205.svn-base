package common.msg.room;

import common.msgReceivers.IRoomMsgReceiver;
import common.team.ITeam;
import provided.datapacket.DataPacketIDFactory;
import provided.datapacket.IDataPacketID;

/**
 * Message type to join a team.
 * @author jonathancai
 *
 */
public interface IJoinTeamMsg extends IRoomMsg {
	
	/**
	 * Retrieve the ID value directly from the interface.
	 * getID() merely delegates to this method.
	 * @return The host ID value associated with this data type.
	 */
	public static IDataPacketID GetID() {
		return DataPacketIDFactory.Singleton.makeID(IJoinTeamMsg.class);
	}
	
	@Override
	public default IDataPacketID getID() {
		return IJoinTeamMsg.GetID();
	}
	
	/**
	 * Get the team member.
	 * @return team member
	 */
	public IRoomMsgReceiver getTeamMember();
	
	/**
	 * The team we want to join.
	 * @return new team we want to join
	 */
	public ITeam getNewTeam();
	
	/**
	 * Factory method to create the data type from an input value.   
	 * The problem with this technique is while it does hide the data type
	 * implementation, defining it at this interface level means that 
	 * the implementation is invariant, which is an unnecessary restriction.
	 * @param member team member
	 * @param newTeam team to join
	 * @return An IConnectMsg object
	 */
	static IJoinTeamMsg make(final IRoomMsgReceiver member, final ITeam newTeam) {
		return new IJoinTeamMsg() {
			
			/**
			 * For Serialization.
			 */
			private static final long serialVersionUID = 2389423823L;

			@Override
			public String toString() {
				return member.toString();
			}

			@Override
			public IRoomMsgReceiver getTeamMember() {
				return member;
			}
			
			@Override
			public ITeam getNewTeam() {
				return newTeam;
			}
			
		};
	}
	
}
