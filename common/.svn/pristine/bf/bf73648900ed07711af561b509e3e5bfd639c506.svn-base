package common.msg.room;

import common.msgReceivers.IRoomMsgReceiver;
import provided.datapacket.DataPacketIDFactory;
import provided.datapacket.IDataPacketID;

/**
 * @author jonathancai
 *
 */
public interface ILeaveTeamMsg extends IRoomMsg {

	/**
	 * Retrieve the ID value directly from the interface.
	 * getID() merely delegates to this method.
	 * @return The host ID value associated with this data type.
	 */
	public static IDataPacketID GetID() {
		return DataPacketIDFactory.Singleton.makeID(ILeaveTeamMsg.class);
	}
	
	@Override
	public default IDataPacketID getID() {
		return ILeaveTeamMsg.GetID();
	}
	
	/**
	 * @return team member to leave the game
	 */
	public IRoomMsgReceiver getTeamMember();
	
	/**
	 * Factory method to create the data type from an input value.   
	 * The problem with this technique is while it does hide the data type
	 * implementation, defining it at this interface level means that 
	 * the implementation is invariant, which is an unnecessary restriction.
	 * @param member to leave the game
	 * @return An IConnectMsg object
	 */
	static ILeaveTeamMsg make(final IRoomMsgReceiver member) {
		return new ILeaveTeamMsg() {
			
			/**
			 * For Serialization.
			 */
			private static final long serialVersionUID = 2389423823L;

			@Override
			public String toString() {
				return member.toString();
			}

			@Override
			public IRoomMsgReceiver getTeamMember() {
				return member;
			}
			
		};
	}
	
}
